/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author champon
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i, n) for(ll i=0; i<n; i++)
#define repr(i, s, e) for(ll i=s; i>=e; i--)
#define reps(i, s, e) for(ll i=s; i<=e; i++)
#define inf 1e18
#define all(v) v.begin(),v.end()
#define ceil(a, b) (a+b-1)/b
#define ok cout << "ok" << endl;
#define sp << " " <<
template<typename T> inline bool chmax(T &a, T b){ if(a<b) a=b; return a<b; }
template<typename T> inline bool chmin(T &a, T b){ if(b<a) a=b; return b<a; }
template<typename T> void vdeb(T v){
    cout << "#vector set debug" << endl;
    for(auto vv : v) cout << vv << " ";
    cout << endl;
}
template<typename T1, typename T2> void adeb(T1 arr[], T2 n){
    cout << "#adebug" << endl;
    for(int i=0; i<=n; i++) cout << arr[i] << " ";
    cout << endl;
}
template<typename T1> void mdeb(T1 mp){
    cout << "#map pair debug" << endl;
    for(auto const& m : mp) cout << m.first sp m.second << endl;
}
template<typename A, size_t N, typename T>
void Fill(A (&array)[N], const T &val){ fill((T*)array, (T*)(array+N), val); }
void ans(bool b){ cout << (b ? "Yes" : "No") << endl; }
void ans2(bool b){ cout << (b ? "YES" : "NO") << endl; }
int dx[] = {1, 0, -1, 0, 1, -1, 1, -1};
int dy[] = {0, 1, 0, -1, 1, -1, -1, 1};


class C {
public:
	void solve(std::istream& in, std::ostream& out) {
        double deg, dis;
        in >> deg >> dis;
        deg /= 10;
        string dir = "N";
        double dist = 11.25;
        if(deg >= dist) dir = "NNE";
        dist += 22.5;
        if(deg >= dist) dir = "NE";
        dist += 22.5;
        if(deg >= dist) dir = "ENE";
        dist += 22.5;
        if(deg >= dist) dir = "E";
        dist += 22.5;
        if(deg >= dist) dir = "ESE";
        dist += 22.5;
        if(deg >= dist) dir = "SE";
        dist += 22.5;
        if(deg >= dist) dir = "SSE";
        dist += 22.5;
        if(deg >= dist) dir = "S";
        dist += 22.5;
        if(deg >= dist) dir = "SSW";
        dist += 22.5;
        if(deg >= dist) dir = "SW";
        dist += 22.5;
        if(deg >= dist) dir = "WSW";
        dist += 22.5;
        if(deg >= dist) dir = "W";
        dist += 22.5;
        if(deg >= dist) dir = "WNW";
        dist += 22.5;
        if(deg >= dist) dir = "NW";
        dist += 22.5;
        if(deg >= dist) dir = "NNW";
        dist += 22.5;
        if(deg >= dist) dir = "N";

        double w[] = {0.0, 0.3, 1.6, 3.4, 5.5, 8.0, 10.8, 13.9, 17.2, 20.8, 24.5, 28.5, 32.7};
        int wres = -1;
        double num = dis / 60.0;

        num = round(num * 10.0) / 10.0;

        //out << num << endl;
        rep(i, 13){
            if(w[i] <= num) wres++;
        }

        if(wres == 0) dir = "C";

        out << dir sp wres << endl;
	}
};


int main() {
	C solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
